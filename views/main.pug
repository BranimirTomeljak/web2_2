doctype html
html
  head
    title Threat Test
    link(rel="stylesheet", href="/stylesheets/style.css")
  body
    section#xss
      h1 XSS napad (pohranjeni)
      b Upute: 
      span Ovo je primjer ranjivosti u kojoj se korisnički unos ne provjerava i prikazuje se na stranici.
      form(onsubmit="xss(); return false;")
        span
          label(for='xss-checkbox') Ranjivost uključena
          input(type='checkbox', id='xss-checkbox', name='xss-checkbox')
        label(for='name') votevr:
        input(type='text', id='name', name='name')
        input(type='submit', value='Submit')
        p(id='response-message-xss') 

    section#sensitive
      h1 Nesigurna pohrana osjetljivih podataka
      b Upute: 
      span Ovo je primjer ranjivosti u kojoj se osjetljivi podaci pohranjuju u bazu podataka bez ikakvog oblika enkripcije. Simuliramo prijavu na neku web aplikaciju u kojoj moramo ostaviti svoje podatke, uključujući privatni e-mail, broj mobitela i zaporku koji se mogu zloupotrijebiti. Nakon slanja zahtjeva, prikazati će se uneseni korisnik kako je zapisan u bazi podataka.
      form(onsubmit="sensitive(); return false;")
        span
          label(for='sensitive-checkbox') Ranjivost uključena
          input(type='checkbox', id='sensitive-checkbox', name='sensitive-checkbox') 
        label(for='sensitive-name') Name:
        input(type='text', id='sensitive-name', name='sensitive-name', required)
        label(for='sensitive-email') Email:
        input(type='email', id='sensitive-email', name='sensitive-email', required)
        label(for='sensitive-phonenumber') Phone number:
        input(type='number', id='sensitive-phonenumber', name='sensitive-phonenumber', required, style='appearance: textfield;')
        label(for='sensitive-password') Password:
        input(type='password', id='sensitive-password', name='sensitive-password', required, placeholder='Minimalno 8 znakova', minlength='8', )
        input(type='submit', value='Submit')
        p(id='response-message-sensitive')
        table(id='response-table-sensitive')

script.
  function xss() {
    const checkbox = document.getElementById("xss-checkbox");
    const name = document.getElementById("name");

    fetch(`/submit/xss`, {
      method: "POST",
      body: JSON.stringify({
        checkbox: checkbox.checked,
        name: name.value,
      }),
      headers: { "Content-type": "application/json" },
    })
      .then((response) => {
        return response.json();
      })
      .then((data) => {
        //nesto nesto
        checkbox.checked = false;
        name.value = "";
      })
      .catch((error) => {
        console.log("There was an error: ", error);
      });
  }

  function sensitive() {
    const checkbox = document.getElementById("sensitive-checkbox");
    const name = document.getElementById("sensitive-name");
    const email = document.getElementById("sensitive-email");
    const phonenumber = document.getElementById("sensitive-phonenumber");
    const password = document.getElementById("sensitive-password");

    fetch(`/submit/sensitive`, {
      method: "POST",
      body: JSON.stringify({
        checkbox: checkbox.checked,
        name: name.value,
        email: email.value,
        phonenumber: phonenumber.value,
        password: password.value,
      }),
      headers: { "Content-type": "application/json" },
    })
      .then((res) => {
        return res.json();
      })
      .then((data) => {
        const responseTable = document.getElementById("response-table-sensitive");

        let table = responseTable.querySelector('table');
        if (!table) {
          table = document.createElement('table');
          table.classList.add('table');

          const headerRow = table.insertRow(0);
          const headers = ['id', 'name', 'email', 'phone number', 'password'];

          headers.forEach((headerText) => {
            const headerCell = document.createElement('th');
            headerCell.textContent = headerText;
            headerRow.appendChild(headerCell);
          });

          responseTable.appendChild(table);
        }

        const newRow = table.insertRow(-1); // -1 appenda red na kraj
        const userData = [data.users.id, data.users.name, data.users.mail, data.users.phonenumber, data.users.password];

        userData.forEach((cellData) => {
          const cell = newRow.insertCell();
          cell.textContent = cellData;
        });

        const responseMessage = document.getElementById("response-message-sensitive");
        if(checkbox.checked)
          responseMessage.innerHTML = "Odabrali ste ranjivi način rada. Podaci koji bi trebali biti zaštićeni su sada u plaintext formatu i predstavljaju ranjivost. Ako netko dođe do baze podataka, može doći do svih podataka, zloupotrijebiti ih i predstavljati se kao netko drugi.<br>Unesite podatke u formu u zaštićenom načinu rada i usporedite rezultate u bazi podataka ispisanoj ispod."
        else
          responseMessage.innerHTML = "Odabrali ste zaštićeni način rada. Svi podaci koji bi trebali biti zaštićeni su zaštićeni. Ako netko dođe do baze podataka, ne može doći do podataka u plaintext formatu. Zaštita se napravila hashiranjem putem alata bcrypt i lako možemo provjeriti je li korisnik unio ispravne podatke pri eventualnoj prijavi.<br>Unesite podatke u formu u ranjivom načinu rada i usporedite rezultate u bazi podataka ispisanoj ispod."

        checkbox.checked = false;
        name.value = "";
        email.value = "";
        phonenumber.value = "";
        password.value = "";
      })

      .catch((error) => {
        console.log("There was an error: ", error);
      });
  }